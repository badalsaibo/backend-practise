{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","console","log","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mPAceA,EAZF,SAAC,GAAkC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,iBACfC,EAAQF,EAAKG,UACf,qBAAuB,iBAC3B,OACE,4BACCH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCuBzB,EA3BA,WACb,IAAMI,EAAUC,IAAMC,IAJR,UAKRC,EAAc,CAClBC,GAAI,IACJN,QAAS,kCACTO,KAAM,2BACNR,WAAW,GAEb,OAAOG,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAmBxC,EAfA,SAACO,GAGd,OAFgBT,IAAMU,KAhBR,SAgBsBD,GAErBJ,MAAK,SAAAC,GAClB,OAAOA,EAASC,SAWL,EANA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAzBF,SAyBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,oOCtB3C,IAAMK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,IAKDE,EAAS,WAQb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGA0GSC,EArGH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACbC,EADa,KACNC,EADM,OAEWF,mBAAS,0BAFpB,mBAEbG,EAFa,KAEJC,EAFI,OAGWJ,oBAAS,GAHpB,mBAGbK,EAHa,KAGJC,EAHI,OAIqBN,mBAAS,MAJ9B,mBAIbO,EAJa,KAICC,EAJD,KAMrBC,qBAAW,WACTC,IAEG3B,MAAM,SAAC4B,GACNT,EAASS,QAEZ,IAEH,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAQ,SAAC1C,GAAD,OAAUA,EAAKG,aAE3BwC,EAAqB,SAACjC,GAC1BkC,QAAQC,IACN,iBAAmBnC,EAAK,wBAE1B,IAAMV,EAAO8B,EAAMgB,MAAM,SAACC,GAAD,OAAOA,EAAErC,KAAOA,KACnCsC,E,yVAAW,IAAOhD,EAAP,CAAaG,WAAYH,EAAKG,YAE/CoC,EACU7B,EAAIsC,GACXpC,MAAM,SAACqC,GACNlB,EAASD,EAAMoB,KAAK,SAAClD,GAAD,OAAUA,EAAKU,KAAOA,EAAKV,EAAOiD,SAEvDE,OAAO,SAACC,GACPf,EAAgB,SAAD,OACJrC,EAAKI,QADD,sCAGfiD,YAAY,WACVhB,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAQ,SAAAK,GAAC,OAAIA,EAAErC,KAAOA,UAuC3C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcU,QAASgB,IAEvB,4BAAQ/B,QAVQ,WAClB8B,GAAYD,KASV,QACQA,EAAU,YAAc,OAEhC,4BA3CKO,EAAYS,KAAK,SAAClD,GAAD,OACtB,kBAAC,EAAD,CACEsD,IAAKtD,EAAKU,GACVV,KAAMA,EACNC,iBAAmB,kBAAM0C,EAAmB3C,EAAKU,WA0CnD,0BAAM6C,SArCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtD,QAAS4B,EACTrB,MAAM,IAAIgD,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAW,GAC3BpD,GAAIoB,EAAMiC,OAAS,GAGrBxB,EACUmB,GACP9C,MAAM,SAACqC,GACNlB,EAASD,EAAMf,OAAOkC,IACtBhB,EAAW,SAyBX,2BACE+B,MAAOhC,EACPiC,SAvBa,SAACT,GACpBvB,EAAWuB,EAAMU,OAAOF,UAwBpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,QC5HNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.eb3310aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ( { note, toggleImportance } ) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n  return (\n    <li>\n    {note.content}\n    <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n}\n\n\nexport default Note;","import axios from 'axios';\nconst baseUrl = '/notes';\n\n// GETTING ALL NOTES\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 1000,\n    content: 'This is not saved to the server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting));\n};\n\n// CREATING NEW NOTES\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n \n  return request.then(response => {\n    return response.data})\n}\n\n// UPDATING NOTES\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n// BEING EXPORTED AS AN OBJECT WITH SAME NAME\nexport default {\n  getAll,\n  create,\n  update,\n}","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n}\n\nconst Footer = () => {\n  \n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle} >\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  );\n}\n\nconst App = (props) => {\n  const [ notes, setNotes ] = useState([]);\n  const [ newNote, setNewNote ] = useState('Type your note here...');\n  const [ showAll, setShowAll ] = useState(true);\n  const [ errorMessage, setErrorMessage ] = useState(null);\n\n  useEffect( () => {\n    noteService\n      .getAll()\n      .then( (initialNotes) => {\n        setNotes(initialNotes);\n      })\n  }, []);\n\n  const notesToShow = showAll \n    ? notes\n    : notes.filter( (note) => note.important )\n\n  const toggleImportanceOf = (id) => {\n    console.log(\n      'importance of ' + id + ' needs to be toggled'\n    )\n    const note = notes.find( (n) => n.id === id); // note gets a reference and not a copy\n    const changedNote = {...note, important: !note.important};\n    \n    noteService\n      .update(id, changedNote)\n      .then( (returnedNote) => {\n        setNotes(notes.map( (note) => note.id !== id ? note : returnedNote));\n      })\n      .catch( (error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout( () => {\n          setErrorMessage(null)\n        }, 5000);\n        setNotes(notes.filter( n => n.id !== id));\n      })\n  }\n\n  const rows = () => {\n    return notesToShow.map( (note) => \n      <Note \n        key={note.id}\n        note={note}\n        toggleImportance={ () => toggleImportanceOf(note.id)}\n      />\n    );\n  }\n\n  const addNote = (event) => {\n    event.preventDefault(); //prevents re-load\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n\n    noteService\n      .create(noteObject)\n      .then( (returnedNote) => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('')\n      })\n  }\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const handleClick = () => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage}/>\n\n      <button onClick={handleClick}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}